<sheet version="1">
<markup version="1" identifier="markdownxl" displayName="MarkdownÂ XL">
	<tag definition="heading1" pattern="#"></tag>
	<tag definition="heading2" pattern="##"></tag>
	<tag definition="heading3" pattern="###"></tag>
	<tag definition="heading4" pattern="####"></tag>
	<tag definition="heading5" pattern="#####"></tag>
	<tag definition="heading6" pattern="######"></tag>
	<tag definition="codeblock" pattern="''"></tag>
	<tag definition="comment" pattern="%%"></tag>
	<tag definition="divider" pattern="----"></tag>
	<tag definition="nativeblock" pattern="~~"></tag>
	<tag definition="blockquote" pattern="&gt;"></tag>
	<tag definition="orderedList" pattern="\d."></tag>
	<tag definition="unorderedList" pattern="*"></tag>
	<tag definition="unorderedList" pattern="+"></tag>
	<tag definition="unorderedList" pattern="-"></tag>
	<tag definition="code" startPattern="`" endPattern="`"></tag>
	<tag definition="delete" startPattern="||" endPattern="||"></tag>
	<tag definition="emph" startPattern="*" endPattern="*"></tag>
	<tag definition="emph" startPattern="_" endPattern="_"></tag>
	<tag definition="inlineComment" startPattern="++" endPattern="++"></tag>
	<tag definition="inlineNative" startPattern="~" endPattern="~"></tag>
	<tag definition="mark" startPattern="::" endPattern="::"></tag>
	<tag definition="strong" startPattern="__" endPattern="__"></tag>
	<tag definition="strong" startPattern="**" endPattern="**"></tag>
	<tag definition="annotation" startPattern="{" endPattern="}"></tag>
	<tag definition="link" startPattern="[" endPattern="]"></tag>
	<tag definition="footnote" pattern="(fn)"></tag>
	<tag definition="image" pattern="(img)"></tag>
	<tag definition="video" pattern="(vid)"></tag>
</markup>
<string xml:space="preserve">
<p></p>
<p></p>
<p><tags><tag kind="heading1">#</tag></tags>2602 Core Library</p>
<p><tags><tag kind="heading2">##</tag></tags>Version 1.1</p>
<p><tags><tag kind="heading3">###</tag></tags>Albert Li</p>
<p><tags><tag kind="heading4">####</tag></tags>For Team 2602 only</p>
<p><tags><tag kind="heading1">#</tag></tags>Introduction</p>
<p>This Core Library is a series of ROBOTC C code functions and data structures that contains basic and advanced functions using in VEX EDR competition. The library is distributed as a single header file that is included at the top of the main ROBOTC source file by means of an #include statement. The library provides the following functionality.</p>
<p><tags><tag kind="unorderedList">- </tag></tags>Setup gyro(s)</p>
<p><tags><tag kind="unorderedList">- </tag></tags>Filter gyro data to eliminate noises</p>
<p><tags><tag kind="unorderedList">- </tag></tags>P control turn based on gyro read</p>
<p><tags><tag kind="unorderedList">- </tag></tags>PID control for chassis</p>
<p><tags><tag kind="unorderedList">- </tag></tags>Automatically close the pincher based on speed calculation</p>
<p><tags><tag kind="unorderedList">- </tag></tags>P control open pincher</p>
<p><tags><tag kind="unorderedList">- </tag></tags>P control calculartor</p>
<p></p>
<p><tags><tag kind="heading1">#</tag></tags>Installation</p>
<p>The Core Library for 2602 is included in the main ROBOTC source file as follows</p>
<p><tags><tag kind="codeblock">'' </tag></tags>//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//</p>
<p><tags><tag kind="codeblock">'' </tag></tags>//include library</p>
<p><tags><tag kind="codeblock">'' </tag></tags>#include "SmartMotorLib.c"</p>
<p><tags><tag kind="codeblock">'' </tag></tags>task main()</p>
<p><tags><tag kind="codeblock">'' </tag></tags>{</p>
<p><tags><tag>	</tag><tag kind="codeblock">'' </tag></tags>//user code</p>
<p><tags><tag kind="codeblock">'' </tag></tags>}</p>
<p></p>
<p>The Core Library should be located in the same directory as the main source file.</p>
<p></p>
<p><tags><tag kind="heading1">#</tag></tags>How to use the library</p>
<p>The general procedure for using the Core Library is as follows.</p>
<p><tags><tag kind="unorderedList">- </tag></tags>Initialize the library</p>
<p><tags><tag kind="unorderedList">- </tag></tags>Call functions and task when needed</p>
<p></p>
<p><tags><tag kind="heading2">##</tag></tags>Initialization</p>
<p>The Core Library is initialized by calling following functions</p>
<p><tags><tag kind="codeblock">'' </tag></tags>void setArm(tMotor motorR, tMotor motorL, tSensors port, int down, int full,int none,int star,int stars,int cube)</p>
<p><tags><tag>	</tag></tags>This function initializes the arm part of the library. User should enter the port numbers of right and left motors of the arm, the port of encoder of the arm, and the critical encoder value when arm is down, up, hold nothing, hold a star, hold 3 stars and hold cube, respectively.</p>
<p><tags><tag kind="codeblock">'' </tag></tags>void setChassis(char side,tMotor motorport, tSensors sensorport, float kp, float ki, float kd, float integrallimit)</p>
<p><tags><tag>	</tag></tags>This function initializes the chassis part of the library. User should first enter the side they want to initializes: 0==Right, 1==Left. User then should enter motor port(two motors should be Y-Cabled), encoder port, P-value, I-value, D-value and integral limit for PID control.</p>
<p><tags><tag kind="codeblock">'' </tag></tags>void setPincher(char side,tMotor motorport, tSensors sensorport,int openMV,int midMV,int closeMV)</p>
<p><tags><tag>	</tag></tags>This function initializes the pincher part of the library. User should first enter the side they want to initializes: 0==Right, 1==Left. User then should enter motor port, potentiometer port, critical potentiometer value when pincher is fully open, in the middle, and fully closed, respectively.</p>
<p><tags><tag kind="codeblock">'' </tag></tags>void setGyro(tSensors port,int scale)</p>
<p><tags><tag>	</tag></tags>This function initializes gyro. User should enter the analog port of a tuned gyro, and the sensor scale of such tuned gyro. </p>
<p></p>
<p><tags><tag kind="heading2">##</tag></tags>Chassis Movement</p>
<p><tags><tag kind="codeblock">'' </tag></tags>void chassisPID(bool forward, bool ifLift, bool ifHoldPincher, int target)</p>
<p><tags><tag>	</tag></tags>This moves chassis straight for <element kind="code" startTag="`">target</element> encoder counts.</p>
<p><tags><tag>	</tag></tags>If <element kind="code" startTag="`">forward</element> is set to <element kind="code" startTag="`">true</element>, chassis moves forward. Other wise, it moves backward.</p>
<p><tags><tag>	</tag></tags>If <element kind="code" startTag="`">ifLift</element> is set to <element kind="code" startTag="`">true</element>, arm lifts when the chassis is close to <element kind="code" startTag="`">target</element>.</p>
<p><tags><tag>	</tag></tags>If <element kind="code" startTag="`">ifHoldPincher</element> is set to <element kind="code" startTag="`">true</element>, pincher uses motor power to hold while moving straight.</p>
<p><tags><tag kind="codeblock">''</tag></tags>void gyroTurn(int nDegree,int timeLimit)</p>
<p><tags><tag>	</tag></tags>This function turns the robot <element kind="strong" startTag="**">to</element> <element kind="code" startTag="`">nDegree</element> within <element kind="code" startTag="`">timeLimit</element> using P-control.</p>
<p><tags><tag>	</tag></tags>Usually the <element kind="code" startTag="`">timeLimit</element>is 1000ms.</p>
<p><tags><tag>	</tag></tags><element kind="code" startTag="`">nDegree</element>is a field center value. It is 0 when the gyro is setup; it increases when the robot turns anti-clockwise; it decreases when the robot turns clockwise.</p>
<p></p>
<p><tags><tag kind="heading2">##</tag></tags>Arm Movement</p>
<p><tags><tag kind="codeblock">''</tag></tags>void autoArmDown()</p>
<p><tags><tag>	</tag></tags>This moves the arm down using a while loop based on critical encoder value entered during <element kind="code" startTag="`">void setArm</element>.</p>
<p><tags><tag kind="codeblock">'' </tag></tags>void autoArmUp()</p>
<p><tags><tag>	</tag></tags>This moves the arm up to full using a while loop based on critical encoder value entered during <element kind="code" startTag="`">void setArm</element>.</p>
<p><tags><tag kind="codeblock">'' </tag></tags>void autoArmHold(char type)</p>
<p><tags><tag>	</tag></tags>This moves the arm to the hold position and the rubber bands would hold at the position.</p>
<p><tags><tag>	</tag></tags>User should use parameter <element kind="code" startTag="`">type</element> to choose holding model based on what is inside the pincher.</p>
<p><tags><tag>	</tag></tags>type <element kind="code" startTag="`">0</element>==pincher holding nothing</p>
<p><tags><tag>	</tag></tags>type <element kind="code" startTag="`">1</element>==pincher holding 1 or 2 star(s)</p>
<p><tags><tag>	</tag></tags>type <element kind="code" startTag="`">2</element>==pincher holding a cube</p>
<p><tags><tag>	</tag></tags>type <element kind="code" startTag="`">3</element>==pincher holding 3 stars</p>
<p></p>
<p><tags><tag kind="heading2">##</tag></tags>Pincher Movement</p>
<p><tags><tag kind="codeblock">''</tag></tags>void autoOpenPincher()</p>
<p><tags><tag>	</tag></tags>This fully opens the pincher based on a critical potentiometer value entered in <element kind="code" startTag="`">setupPincher</element>. It should only be used in autonomous.</p>
<p><tags><tag kind="codeblock">'' </tag></tags>void autoOpenPincher()</p>
<p><tags><tag>	</tag></tags>This closes the pincher based on speed calculation. It should only be used in autonomous.</p>
<p><tags><tag kind="codeblock">'' </tag></tags>task openPincher()</p>
<p><tags><tag>	</tag></tags>This fully opens the pincher based on a critical potentiometer value entered in <element kind="code" startTag="`">setupPincher</element>. It should only be used in driver control.</p>
<p><tags><tag kind="codeblock">'' </tag></tags>task closePincher()</p>
<p><tags><tag>	</tag></tags>This closes the pincher based on speed calculation. It should only be used in driver control.</p>
<p></p>
<p><tags><tag kind="heading2">##</tag></tags>Sensor Reset and Gyro</p>
<p><tags><tag kind="codeblock">''</tag></tags>void resetChassisEncoders()</p>
<p><tags><tag>	</tag></tags>This resets two encoders of the chassis.</p>
<p><tags><tag kind="codeblock">'' </tag></tags>void resetArmEncoder()</p>
<p><tags><tag>	</tag></tags>This resets the encoder of the arm.</p>
<p><tags><tag kind="codeblock">'' </tag></tags>void gyroSetup()</p>
<p><tags><tag>	</tag></tags>This initializes the gyro. It takes about 3 secs. The robot should be absolutely still during setting up. </p>
<p><tags><tag kind="codeblock">'' </tag></tags>task gyroFilter()</p>
<p><tags><tag>	</tag></tags>This is a background task that filter out the gyro noises. This should be started after setting up the gyro. Usually, this should only be used in autonomous.</p>
<p></p>
<p></p>
<p></p></string>
</sheet>